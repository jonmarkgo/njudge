NB: This file is out of date. Perhaps is it useful for people
migrating from very old version (dipsrc). Please use the install-howto
for newer versions.
-- C.Courtois, 09 Feb. 2002

Since there are major changes, some advice for moving over to this version
of the judge.

1: do a test compile
2: install a test judge
3: ensure you can create games and register on your test judge
4: delete the test judge
5: turn off your real judge by moving the .forward file
6: back up your real judge
7: do a 'make upgrade' over the top of your real judge.  you did make a
   backup, right?
8: test the new judge by feeding a mail file to rdip
9: assuming everything went well, turn your real judge back on, and send
   it some mail, and watch everything real closely.  Nothing should break,
   but...

-- nw (Mon Oct 27 05:38:31 UTC 1997)

==========================

Installing the judge should be just a matter of editing the Makefile to set
DESTDIR to where you want the judge installed.  Then do 'make install' if it
is a new judge, or 'make upgrade' if you are upgrading an existing judge.

Then make sure you are using a version of smail and atrun that will work
with your system.  Versions for linux and solaris are provided.  Submissions
for other platforms are wanted.

After that, you will need to go to the judge directory, and edit dip.conf to
set appropriate values.

That's all there is to it.

If you run into any trouble, or have any strange output from the make, or
encounter any bugs running the judge itself, please send email to
judge-bugs@hydaspes.if.org.  Alternatively you can submit a bug report at
http://hydaspes.if.org/~judge/bugreport.cgi

You may want to look at the BUGS file to see any other known problems.

-- nw Thu Oct  2 05:51:09 GMT 1997

============================================================================

The stuff below is old.  It may or may not be useful.  -- nw

README: Diplomacy* Adjudicator files and flow          December 17th, 1991
                         Dxxx file information  revised November 6th, 1994


To install the diplomacy adjudicator, change the 

  DESTDIR      definition in the Makefile, 
  GAMES_MASTER definition in dip.conf
  OURSELVES    definition in dip.conf

and the addresses at the end of the data/info file and the line in the smail
script.

Pick a random 6-digit number (to be kept secret, see comments for the
die_rolls routine in lib.c for more info) and generate a file ".magic.h" 
containing the line:

  #define DIE_MAGIC number
  #define SPECIAL_PW "xxx"

  Where xxx is some password that you keep secret.  The GAMES_MASTER
  can use this password to become the master for any game.

Then run 'make depend' followed by 'make install'.


The .forward file for the adjudicator's account should contain the 
following (including the quotes, substitute for DESTDIR):

   "| /DESTDIR/dip/rdip -bd DESTDIR"

All mail sent to the adjudicator will be processed as diplomacy mail, a
special account should be set up as this.  The GAMES_MASTER mail should
be directed to a person (DO NOT specify the adjudicator's address as the
GAMES_MASTER!).

You need to install the map utility files by hand. Go to the mapit 
subdirectory and type "make". Copy mapit and all the support files into
a directory called "mapit" in your destination directory. Also copy 
rundipmap into the destination directory.

The following files are installed or created in the destination directory:

dip
  This is the executable.  Dip will be invoked by the .forward file when
  mail is sent to the adjudicator account.  It will figure out when the
  next event should occur and submit a copy of 'diprun' onto the 'at'
  queue.  Diprun will invoke dip with the -x parameter to process any
  games that are ready.

diprun
  This is a csh script that will invoke dip via the at queue.

dipclean
  This is a csh script that should be executed once by hand once.  It
  will put itself onto the at queue for subsequent runs on Saturdays
  at 2pm.  This script relies on the flock program.  The source is
  included, but is not built by the Makefile.

dip.log
  This is an interlock file that keeps two dips from running at the same
  time.  In addition, all received mail is written to this file to allow
  reconstruction should some drastic event occur.  The dipclean script
  will move this file to dip.log.0 once per week to keep it from getting
  out of hand.  Before editing dip.master or any of the other databases
  that the adjudicator maintains you should lock this file to shut it
  out.  The flock program can be used to do this interlocking.

dip.master
  This database contains the status of each game.  The sequence number of
  the game, the next deadline and the players in the game are in this
  file.  If no file exists, one is created.  If a file exists it will not
  be changed by 'make install'.  Note, you should add yourself as a master
  in game control by hand (use the "observe control <password>" command
  and then edit dip.master to change to "o" in observer to an "m" for
  master -- only the first character of that word is significant).

dip.whois
  This is a database containing the registration information for the
  people who have registered with the adjudicator.  When people register
  the adjudicator looks for someone else in this file who specified the
  same site name.  If found, the site id of the other person will be used.
  If not found the area code from the phone number times 100 will be used.
  This doesn't work very well for European phone numbers.  Site numbers
  that are multiples of 100 will match site numbers that are the same in
  the other digits (40100 matches 40101 and 40102, but 40101 does not
  match 40102).  When registrations come in a message is sent to the
  GAMES_MASTER.  Even multiples of 100 should be modified with the fixid
  command: "fixid 40103 Site Name" sent in a mail message to the adjudicator.
  Anyone can use the fixid command, but notification will be sent to the
  GAMES_MASTER notifying you that someone is mucking around.

dip.addr
  This file associates a user number and siteid with an email address and 
  vice versa.  Each user may have multiple email addresses.

dip.dedicate
  This is a binary file that keeps track of the dedication rating of
  each of the registered players.  The dedication rating can be
  adjusted for a particular person with the "adjust user increase"
  command where "user" refers to the user number as in the dip.whois
  file and "increase" is a positive or negative number to be added to
  the dedication rating for the user.  Anyone can use the adjust
  command, but again, a notification will be sent to the GAMES_MASTER
  notifying you that someone is mucking around.  If the dip.dedicate
  file is removed, a new one will be regenerated from whatever
  dedication rating is found in the dip.whois file.  The whois file may
  be out of date.  It is only updated when the whois file needs to be
  updated because of a registration request or a fixid command.

smail
  This is a csh script that will send mail out.  The first 10 lines of the
  mail is written to the file 'mail.log' as a debugging aid.  This can be
  commented out.  The mail.log file will be mvoed to mail.log.0 each week
  by the dipclean script to keep it from getting out of hand.

map.n
  The map.n files are compiled binary data files containing the
  Diplomacy map.  This consists of the province names, abbreviations,
  type and whether there is a supply center and the adjacency table.
  The number specifies the variant.  See variant.h for the list of
  supported variants.  See data/map.n below:

data/map.n
  This is the source for the map.n files.  Any changes to this file will
  be propagated to the map.n file with a "make install" command which
  will recompile the map with the cmap program.

data/info
  This is a help file that will be sent to players when they send the HELP
  command.

data/seed.n
  This is the initial position of units on the map.  It is copied to the
  'Dxxx/G001' file when a game starts up.

data/report.n
  This is the initial position report.  It is sent to players, along with 
  additional information particular to the game or the player when a game 
  starts up.

data/xxxx
  The rest of the files in the data subdirectory, and the ones listed above, 
  can be retrieved by users with the "get xxxx" command.

Dxxx/
  The files pertaining to a particular game are each kept in their own
  subdirectory.  The xxx is the name of the game in question.

Dxxx/Gnnn
  This is the game file for game xxx turn nnn.  It contains the current
  and past status of the particular game.

Dxxx/Mnnn
  This is the current set of moves for game xxx.  Only the highest numbered 
  file is necessary.  The dipclean script will remove movement files that
  have not been accessed for more than 90 days.

Dxxx/Pnnn
  The P files contain the pending orders for a particular turn.  Only the
  highest numbered file is necessary.  Most of these files will be zero
  length because people don't usually send their orders in ahead of time.
  The dipclean script will get rid of zero length files.

Dxxx/Tnnn
  These files are temporary files that can be cleaned up if they are found
  left lying around.  The dipclean script will get rid of them evenutually

Dxxx/archive
  This is the archive of broadcasts and game information that an observer
  would see for any given game.  This information can be retrieved with the
  the HISTORY command.

Dxxx/info
  Information about the game, which can be set with the SET COMMENT command.
  This information is shown in the summary, and in the full list.

Dxxx/summary
  The summary, as seen by a player in the game.

Dxxx/msummary
  The summary, as seen by a master of the game.

Dxxx/start
  The date and time when the game started (the point when the countries were
  assigned).  This is used in the summary.

Dxxx/draw
  Contains the date and time when the game ended, and the result.  This is
  used in the summary.  If this file has been created, it will be deleted
  if another turn processes.

The following files can be created in the "dip" directory to allow the
options:

ALLOW.map      = Allow use of the map command to produce .ps maps of 
		 a game
ALLOW.map-star = Allow use of the "map *" command to produce .ps maps
		 of a game based on a LIST output.

Periodically bugs are fixed and new features are added to the adjudicator.
You can send a "version" command via email to the adjudicator from whence
you got your source distribution (probably judge@u.washington.edu) to see 
what enhancements have been implemented there.  After you've done your
"make install" the version.h file will have a FROM definition indicating
the version that your source was based on.  If it says "from milton 3.0"
you can send a "Version 3.0" command to milton's adjudicator to get a list
of the changes logged since then.  Each time you execute "make install" the
make process will check to see if you've updated your log file.  If not it
will throw you into the vi editor (change the EDLOG definition in the
Makefile if you don't like vi) to change the log file.  You can exit with
the :q command to indicate that no real changes were made.  If the log file
has changed, either through the above automatic vi invocation or through
editing the log file manually offline the minor number will be incremented
and a line added to the log so people sending your adjudicator "version"
commands can tell what you've done.  When "make tar" (or "make uutar") is
executed the major number will be incremented to notify people that a new
release is available.  Note that an increased major number does not
necessarily mean a major change was implemented, it just means a new tar
distribution file was generated.

-----

*  Diplomacy is a trademark of the Avalon Hill Game Company, Baltimore,
   Maryland, all rights reserved; used with permission.
