%!PS-Adobe-2.0
%%Title: Maharajah1 Diplomacy map
%%Creator: mapit
%%Pages: (atend) 1
%%BoundingBox: (atend)
%%DocumentPaperSizes: Letter A4
%%Orientation: Landscape
%%EndComments

% This is a template for mapit maps produced by Mapmaker for Windows by David
% Norman. This template was written by Gary Duke.
% The intention is to allow any map drawn by Mapmaker to be used to produce
% mapit output with the "look" of the original Diplomacy map under mapit - 
% i.e. with the OrderReport and so on in similar places. The only part of the
% mapit output to suffer is that concerned with the StatusReport, as there
% is no way of guaranteeing a section of the map in which to place it (as
% the ordinary mapit uses the top-right of the standard map for this).

% * Most of this template is the special mapit prologue developed by George 
% * Boyce, which provides the following features:
% *
% * DrawMap      draws the base map
% * DrawName     draws a province name
% * DrawArmy     draws an army
% * DrawFleet    draws a fleet
% * DrawTitle    write game title
% * DrawMessage  write a footnote/message
%
% * OrderReport   positions point to write order report
% * RetreatReport
% * OwnerReport
% * AdjustReport
% * StatusReport
%
% * WriteOrder   writes the order line
% * WriteRetreat
% * WriteOwner
% * WriteAdjust
% * WriteStatus
%
% * ArrowMove    draws arrow indicating a move order
% * ArrowHold
% * ArrowSupport
% * ArrowConvoy
%
% This section is followed by an adjusted version of the MapMaker PS template,
% written by Gary Duke.

/country 0 def

/Black { 0 setgray } bind def
/White { 1 setgray } bind def

/set_country { % N /piececolour /contrast => -
    load /Contrast exch store
    load /PieceColour exch store
    /country exch store
} bind def
/Top 0 def
/Left 0 def
/Right 764 def
/Bottom 845 def
/mainscale 1.068103 def
/Title (Maharajah1 Diplomacy) def
/Countries 8 array def
Countries 0 (?) put
/Offsets 8 array def
/BAHMANID-SULTANATE-COLOR { 1.000 0.000 1.000 setrgbcolor } def
Countries 1 (B) put
/BAHMANID-SULTANATE { 1 /BAHMANID-SULTANATE-COLOR /Black set_country } def
/BAHMANID-SULTANATECENTER { BAHMANID-SULTANATE-COLOR } def

/DELHI-SULTANATE-COLOR { 1.000 0.000 0.251 setrgbcolor } def
Countries 2 (D) put
/DELHI-SULTANATE { 2 /DELHI-SULTANATE-COLOR /White set_country } def
/DELHI-SULTANATECENTER { DELHI-SULTANATE-COLOR } def

/GONDWANA-COLOR { 0.000 0.000 1.000 setrgbcolor } def
Countries 3 (G) put
/GONDWANA { 3 /GONDWANA-COLOR /White set_country } def
/GONDWANACENTER { GONDWANA-COLOR } def

/MUGHAL-EMPIRE-COLOR { 0.549 0.314 0.000 setrgbcolor } def
Countries 4 (E) put
/MUGHAL-EMPIRE { 4 /MUGHAL-EMPIRE-COLOR /White set_country } def
/MUGHAL-EMPIRECENTER { MUGHAL-EMPIRE-COLOR } def

/RAJPUTANA-COLOR { 1.000 1.000 0.000 setrgbcolor } def
Countries 5 (R) put
/RAJPUTANA { 5 /RAJPUTANA-COLOR /Black set_country } def
/RAJPUTANACENTER { RAJPUTANA-COLOR } def

/SAFAVID-EMPIRE-COLOR { 0.000 1.000 0.000 setrgbcolor } def
Countries 6 (S) put
/SAFAVID-EMPIRE { 6 /SAFAVID-EMPIRE-COLOR /Black set_country } def
/SAFAVID-EMPIRECENTER { SAFAVID-EMPIRE-COLOR } def

/VIJAYANAGAR-COLOR { 1.000 0.502 0.000 setrgbcolor } def
Countries 7 (V) put
/VIJAYANAGAR { 7 /VIJAYANAGAR-COLOR /Black set_country } def
/VIJAYANAGARCENTER { VIJAYANAGAR-COLOR } def

/Message1 (Variant created by David E. Cohen. Map Drawn by David E. Cohen.) def
% constants:
  /AdjustScale {mainscale mul} bind def
  /NameOffset {LetterSize} def		% distance below point to draw name
  /UnitOffset {LetterSize} def		% distance above point to draw unit

  /TitleFontSize 20 def			% font size (Times-Roman)
  /MessageFontSize 8 def		% font size (Times-Roman)
  /NameFontSize 6 AdjustScale def	% font size (Helvetica-Bold)
  /OrderFontSize 10 def			% font size (Courier)
  /OwnerFontSize 8 def			% font size (Courier)

  /HeadLength 10 AdjustScale def	% of a move arrow head
  /HalfHeadThickness 5 2 div AdjustScale def	

  /HalfThickness 1 2 div AdjustScale def % of a move/support/convoy arrow shaft

  /HoldCircle 10 AdjustScale def	% of a support hold arrow
  /MoveCircle 4 AdjustScale def		% of a support move arrow
  /ConvoyCircle 6 AdjustScale def	% of a convoy arrow

/ShowPage /showpage load def	% nothing special required

/OrderReport {	% to the right of the map
 597 372 moveto
 /Courier findfont OrderFontSize scalefont setfont
} def
/RetreatReport { % below order report with a title in slightly larger font
 597 -40 moveto
 /Courier-Bold findfont OrderFontSize 2 add scalefont setfont
 currentpoint OrderFontSize sub 2 sub (Retreat orders:) show moveto
 /Courier findfont OrderFontSize scalefont setfont
} def
/OwnerReport {	% below left half of map
 0 -28 moveto
 /Courier findfont OwnerFontSize scalefont setfont
} def
/AdjustReport {	% below right half of map
 400 -28 moveto
 /Courier findfont OwnerFontSize scalefont setfont
} def
/StatusReport {	% in upper right corner of map
600 367 moveto
 /Courier findfont OwnerFontSize scalefont setfont
} def

/Write { currentpoint 3 2 roll show moveto 0 FontSize neg rmoveto } def
/WriteOrder { /FontSize OrderFontSize def Write } def
/WriteRetreat { WriteOrder } def
/WriteOwner { /FontSize OwnerFontSize def Write } def
/WriteAdjust { WriteOwner } def
/WriteStatus { } def

% failed orders get dashed lines, good orders normal lines
/FailedOrder { [2] 1 setdash } def
/OkOrder { [] 0 setdash } def

/DrawTitle {
 597 413 moveto
 /Times-Roman findfont TitleFontSize scalefont setfont
 currentpoint Title show moveto
 0 TitleFontSize neg rmoveto show
} def

/DrawMessage {
0 424 MessageFontSize add moveto
 /Times-Roman findfont MessageFontSize scalefont setfont
 show
} def

% draw an arrow indicating a move order between two points
/ArrowMove {
  /tipy exch def
  /tipx exch def
  /taily exch def
  /tailx exch def

  /dx tipx tailx sub def
  /dy tipy taily sub def
  /angle dy dx atan def

% positon origin at base of arrow with arrow point along x axis
  gsave
  mapdict begin
  MapCoords
  tailx taily translate
  PortraitFlag {UnitOffset neg 0} {0 UnitOffset neg} ifelse translate
  angle rotate
  end

  /arrowlength dx dx mul dy dy mul add sqrt def
  /base arrowlength HeadLength sub def

  % if base of arrow is long enough, shorten it
  % e.g. which moves arrow start beyond support circle
  /x base LetterSize gt {/base base LetterSize sub def LetterSize /arrowlength arrowlength LetterSize sub def} {0} ifelse def
  % if base is still 5 or longer, shorten it some more
  % which makes arrow head touch support circle
  base LetterSize ge {/base base LetterSize sub def /arrowlength arrowlength LetterSize sub def} if

  x 0 translate

  newpath
  0 HalfThickness neg moveto
  base HalfThickness neg lineto
  base HalfHeadThickness neg lineto
  arrowlength 0 lineto
  base HalfHeadThickness lineto
  base HalfThickness lineto
  0 HalfThickness lineto
  closepath

  stroke
  grestore
} def

% draw an arrow indicating support of a unit holding at p1
/ArrowHold {
  /tipy exch def
  /tipx exch def
  /taily exch def
  /tailx exch def

  tailx taily tipx tipy HoldCircle ArrowCircle

} def

% draw arrow indicating support of a unit moving from p1 to p2
/ArrowSupport {
  /y2 exch def
  /x2 exch def
  /y1 exch def
  /x1 exch def
  /taily exch def
  /tailx exch def

% find midpoint of (x1,y1)-(x2,y2)
  /tipx x1 x2 min x1 x2 sub abs 2 div add def
  /tipy y1 y2 min y1 y2 sub abs 2 div add def

  tailx taily tipx tipy MoveCircle ArrowCircle

} def

% draw arrow indicating convoy of a unit moving from p1 to p2
/ArrowConvoy {
  /y2 exch def
  /x2 exch def
  /y1 exch def
  /x1 exch def
  /taily exch def
  /tailx exch def

% find midpoint of (x1,y1)-(x2,y2)
  /tipx x1 x2 min x1 x2 sub abs 2 div add def
  /tipy y1 y2 min y1 y2 sub abs 2 div add def

  tailx taily tipx tipy ConvoyCircle ArrowCircle

} def

/ArrowCircle {	% like an arrow but with a circle at the tip
  /headdiam exch def
  /tipy exch def
  /tipx exch def
  /taily exch def
  /tailx exch def

  /dx tipx tailx sub def
  /dy tipy taily sub def
  /arrowlength dx dx mul dy dy mul add sqrt def
  /angle dy dx atan def
  /base arrowlength headdiam sub def

% positon origin at base of arrow with arrow point along x axis
  gsave
  mapdict begin
  MapCoords
  tailx taily translate
  PortraitFlag {UnitOffset neg 0} {0 UnitOffset neg} ifelse translate
  angle rotate
  end

  % if base of arrow is long enough, shorten it by LetterSize
  % e.g. which moves arrow start beyond support circle
  /x base LetterSize gt {/base base LetterSize sub def /arrowlength arrowlength LetterSize sub def LetterSize} {0} ifelse def

  x 0 translate

% draw the shaft first...
  base HalfThickness neg moveto
  0 HalfThickness neg lineto
  0 HalfThickness lineto
  base HalfThickness lineto
% now the circle...
  /a 180 HalfThickness headdiam 2 div atan sub def
  /b 180 HalfThickness headdiam 2 div atan add def
  arrowlength 0 headdiam a b arcn

  closepath
  stroke
  grestore
} def

% draw the given name centered just below the specified point
/DrawName { % x y str => -
mapdict begin
 gsave
 /Helvetica-Bold findfont NameFontSize scalefont setfont
 MapCoords
 3 1 roll translate
 NormCoords
 dup stringwidth pop
 -2 div 0 NameOffset sub moveto show
 grestore
end
} def

/max { % p q => max(p,q)
  2 copy lt { exch} if pop
} bind def

/min { % p q => min(p,q)
  2 copy gt { exch} if pop
} bind def

/InitLetters {
  0 0				% maxdx maxdy
  0 1 Countries length 1 sub {
    /N exch def
    Countries N get	% maxdx maxdy (N)
    newpath 0 0 moveto
    true charpath pathbbox     % ... llx lly urx ury
    %
    % Compute the offset in to centre the letter at 0,0
       4 copy		% llx lly urx ury
       3 -1 roll add -2 div	% llx urx dy
       3 1 roll add -2 div	% dy dx
       exch 2 array astore	% [dx,dy]
       Offsets N 3 -1 roll put  % - ([dx,dy] stored in offsets)
    %
    % Update maximum xwidth, ywidth
    3 -1 roll sub		% llx urx leny
    3 1 roll exch sub exch	% lenx leny
    				% maxdx maxdy lenx leny
    3 -1 roll max		% maxdx lenx newmaxdy
    3 1 roll max		% newmaxdy newmaxdx
    exch
  } for

  newpath
  % maxdx maxdy = biggest bounding rectangle of the letters
  max 1.5 mul /LetterSize exch def
} def

/Helvetica-Bold findfont NameFontSize scalefont setfont InitLetters

/PieceColour { 1 setgray } bind def
/Contrast { 0 setgray } bind def

% Army is a little cannon...
/DrawArmy { % x y X => -
  mapdict begin
  country
  3 1 roll 
  PortraitFlag {exch} if
  UnitOffset sub
  PortraitFlag {exch} if
  gsave MapCoords translate NormCoords
    gsave 
      newpath
      LetterSize 14 div dup scale
      -20 7 moveto 30 0 rlineto 0 -4 rlineto 4 0 rlineto
       0 -2 rlineto -30 0 rlineto 0  2 rlineto -4 0 rlineto
       0 4 rlineto		% barrel
       4 2 moveto 20 -10 rlineto 2 0 rlineto -8 0 rlineto
      -20  10 rlineto		% carriage
      Contrast 2 setlinewidth stroke
      0 0 9 0 360 arc	% wheel
      closepath
      Contrast 2 setlinewidth stroke
      newpath
      -20 7 moveto 30 0 rlineto 0 -4 rlineto 4 0 rlineto
       0 -2 rlineto -30 0 rlineto 0  2 rlineto -4 0 rlineto
       0 4 rlineto		% barrel
       4 2 moveto 20 -10 rlineto 2 0 rlineto -8 0 rlineto
      -20  10 rlineto		% carriage
      PieceColour fill
      0 0 9 0 360 arc	% wheel
      closepath
      PieceColour fill
    grestore
    dup Offsets exch get aload pop	% N dx dy
    moveto
    /Helvetica-Bold findfont NameFontSize scalefont setfont
    Countries exch get Contrast show	% then a white letter
  grestore
  end
} bind def

% Is it a bird? Is it a balloon? Is it Superman? NO! It's an airplane!
/DrawWing { % N x y => -
  country
  3 1 roll UnitOffset add
  gsave translate
    gsave 
      newpath
      LetterSize 14 div dup scale
      % Start from the front
      2 24 moveto
      
      % left part of cockpit
      -1 0 rlineto -1 -5 rlineto 0 -4 rlineto
      
      % Left wing
      -1 -2 rlineto -12 -9 rlineto -0.5 1.5 rlineto -.5 -1.5 rlineto
      0 -5 rlineto 1 0 rlineto 0 1 rlineto 10 1 rlineto
      1 0 rlineto 
      
      % tail 
      1 -6 rlineto -3 -1 rlineto 0 -1 rlineto 10 0 rlineto
      0 1 rlineto -3 1 rlineto 1 6 rlineto 
      
      % Right wing
      1 0 rlineto 10 -1 rlineto 0 -1 rlineto 1 0 rlineto 
      0 5 rlineto -.5 1.5 rlineto -.5 -1.5 rlineto -12 9 rlineto
      -1 2 rlineto 

      % right part of cockpit
      0 4 rlineto -1 5 rlineto -1 0 rlineto
      closepath
      gsave Contrast 2 setlinewidth stroke grestore
      gsave PieceColour fill grestore 
    grestore
    dup Offsets exch get aload pop	% N dx dy
     exch 1 add exch 3.5 add 
    moveto    
        
    /Helvetica-Bold findfont NameFontSize scalefont setfont
    Countries exch get Contrast show	% then a white letter
    
  grestore
} bind def 

% Fleet is a little boat...
/DrawFleet { % N x y => -
  mapdict begin
  country
  3 1 roll
  PortraitFlag {exch} if
  UnitOffset sub
  PortraitFlag {exch}  if
  gsave MapCoords translate NormCoords
    gsave 
      newpath
      LetterSize 14 div dup scale
      -26 -7 moveto 0 5 rlineto 7 0 rlineto 0 1 rlineto		% to bow
      -3 0 rlineto 0 1 rlineto 7 0 rlineto 0 1 rlineto		% A turret
      -3 0 rlineto 0 1 rlineto 8 0 rlineto 0 -2 rlineto		% B turret
      1 0 rlineto 0 4 rlineto 1 0 rlineto 0 2 rlineto		% conn tower
      2 0 rlineto 0 -1 rlineto 1 0 rlineto 0 4 rlineto		% Infra struct
      2 0 rlineto 0 5 rlineto 1 0 rlineto 0 -5 rlineto		% funnel 1
      2 0 rlineto 0 -4 rlineto 1 0 rlineto 0 3 rlineto		% funnel 2
      2 0 rlineto 0 5 rlineto 1 0 rlineto 0 -5 rlineto		% mast 2
      2 0 rlineto 0 -8 rlineto 2 0 rlineto 0 2 rlineto		% funnel 2
      8 0 rlineto 0 -1 rlineto -3 0 rlineto 0 -1 rlineto	% C turret
      7 0 rlineto 0 -1 rlineto -3 0 rlineto 0 -1 rlineto	% D turret
      6 0 rlineto 0 -1 rlineto 2 0 rlineto 0 -2 rlineto		% stern
      -1 0 rlineto 0 -2 rlineto
      closepath
      gsave Contrast 2 setlinewidth stroke grestore
      PieceColour fill
    grestore
    dup Offsets exch get aload pop	% N dx dy
    moveto
    /Helvetica-Bold findfont NameFontSize scalefont setfont
    Countries exch get Contrast show	% then a white letter
  grestore
  end
} bind def

% Here follows the adjusted Mapmaker -> PS template

% * This template is designed to allow MapMaker to output a map in PostScript.
% * It outputs a map with titles and messages (for copyright, etc) fitting 
% * into 8"x11" Landscape (so should be okay for both A4 and Letter paper).
% The map itself is scaled into a 423x592pts rectangle, with extra space at 
% bottom and right for mapit stuff...
% * This template file was written by Gary Duke.

/Message2 (Map produced by David Norman's MapMaker for Windows via template by Gary Duke.) def
/Message3 (Diplomacy is a trademark of the Avalon Hill Game Company, all rights reserved.) def

/mapdict 22 dict def
mapdict begin
% Set up scaling parameters:
/deltav Top Bottom sub abs def   % abs(T-B)
/deltah Right Left sub abs def   % abs(R-L)
/PortraitFlag deltah deltav lt def % True for Portrait map, False for Lands.

/vrefl Top Bottom lt def    % vrefl is True if vertical axis is reflected
/hrefl Right Left lt def    % hrefl is True if horizontal axis is reflected

PortraitFlag
{
/vscaling 592 deltav div def % 592/(abs(T-B))
/hscaling 423 deltah div def % 423/(abs(R-L)) 
} 
{
/vscaling 423 deltav div def % 423/(abs(T-B))
/hscaling 592 deltah div def % 592/(abs(R-L))
}
ifelse
% Now hscaling and vscaling contain the scale factors for the map coords

/lin /lineto load def             % Alias for lineto
/mv /moveto load def              % Alias for moveto

% Set up procedure to change from normal to map coords
/MapCoordsPort                    % Change to map coords - if Portrait
{
0 423 translate
270 rotate
hscaling hrefl {-1} {1} ifelse div
vscaling vrefl {-1} {1} ifelse div
scale
Left neg Bottom neg translate
}
def
/MapCoordsLand                    % Change to map coords - if Landscape
{
hscaling hrefl {-1} {1} ifelse div
vscaling vrefl {-1} {1} ifelse div
scale
Left neg Bottom neg translate
}
def
/MapCoords
PortraitFlag
{ /MapCoordsPort } { /MapCoordsLand }
ifelse
load
def

% Set up procedure to change from map to normal coords -
%  actually only unscale and rotate (as required)
/NormCoordsPort                   % Change to normal coords - if Portrait
{
hrefl {-1} {1} ifelse hscaling div
vrefl {-1} {1} ifelse vscaling div
scale
90 rotate
}
def
/NormCoordsLand                   % Change to mormal coords - if Landscape
{
hrefl {-1} {1} ifelse hscaling div
vrefl {-1} {1} ifelse vscaling div
scale
}
def
/NormCoords
PortraitFlag
{/NormCoordsPort } { /NormCoordsLand }
ifelse
load
def

/neutcentre             % Draws (neutral) supply centre symbol
{gsave newpath          % Save coord system and start new path
translate NormCoords    % Reset origin and undo scaling
0 -1.5 NameOffset mul    % Want centre of symbol below name
2 mainscale mul         % Radius 2 units
0 360 arc               % Draw and stroke
mainscale setlinewidth stroke
grestore}
def

/homecentre             % Draws (home) supply centre symbol
{gsave newpath          % Save coord system and start new path
translate NormCoords    % Reset origin and undo scaling
0 -1.5 NameOffset mul    % Want centre of symbol below name
2 mainscale mul         % Radius 2 units
0 360 arc               % Draw and fill
fill
grestore}
def

/NO                    % Normal province - nothing needed (mapit draws names)
{pop pop}
def

/NC                    % Neutral centre province - draw symbol
{
neutcentre
}
def

/HC                    % Home centre province - draw symbol
{
homecentre
}
def

end   % Definitions for mapdict completed

% Can't be defined inside mapdict, since this is called from code generated
% by mapit. Should not be used from inside DrawMap.
/supply                 % Draws supply centre symbol, in default color
{mapdict begin         
gsave newpath          % Save coord system and start new path
MapCoords translate NormCoords % Change to map coordinates for the translate
0 -1.5 NameOffset mul   % Want centre of symbol below name
2 mainscale mul
0 360 arc               % Create path
gsave    fill         % Fill, then add small black border for contrast
grestore 0.05 mainscale mul setlinewidth Black stroke 
grestore
end
}
def
% Color for unowned centers 
/UNOWNEDCENTER  { 0.6 0.45 0.2 setrgbcolor } def

% Now for 'shell' of DrawMap routine
/premap {
% First we place origin at lower left corner of map, and rotate to Landscape
461 20 translate 90 rotate
gsave

% Print Mapmaker copyright messages

/Times-Roman findfont 8 scalefont setfont
0 -6 moveto Message1 show
0 -12 moveto Message2 show
0 -18 moveto Message3 show

% Set up line width for main map:
% Linewidth will be geometric mean of scalings in "units"
mainscale hscaling vscaling mul sqrt div setlinewidth

MapCoords
} def

/postmap {
% Draw outline rectangle
grestore
newpath
0 0 moveto 0 423 lineto 592 423 lineto 592 0 lineto closepath
2 setlinewidth stroke
} def

/Part_1 {
699 594 mv
764 594 lin
764 845 lin
638 845 lin
638 773 lin
605 656 lin
closepath gsave 0.9 setgray eofill grestore stroke
316 758 mv
395 769 lin
560 800 lin
560 845 lin
172 845 lin
172 731 lin
closepath gsave 0.9 setgray eofill grestore stroke
88 490 mv
117 612 lin
172 731 lin
172 845 lin
0 845 lin
0 539 lin
54 539 lin
closepath gsave 0.9 setgray eofill grestore stroke
94 345 mv
81 413 lin
42 383 lin
0 383 lin
0 280 lin
49 280 lin
closepath gsave 0.9 setgray eofill grestore stroke
81 413 mv
94 345 lin
139 365 lin
181 382 lin
216 430 lin
236 485 lin
228 541 lin
117 612 lin
88 490 lin
closepath gsave 0.9 setgray eofill grestore stroke
228 541 mv
258 579 lin
272 611 lin
273 651 lin
347 676 lin
362 715 lin
298 721 lin
316 758 lin
172 731 lin
117 612 lin
closepath gsave 0.9 setgray eofill grestore stroke
482 539 mv
519 495 lin
573 472 lin
645 522 lin
699 594 lin
605 656 lin
447 626 lin
453 578 lin
closepath gsave 0.9 setgray eofill grestore stroke
347 676 mv
421 667 lin
447 626 lin
605 656 lin
638 773 lin
560 800 lin
395 769 lin
429 739 lin
362 715 lin
closepath gsave 0.9 setgray eofill grestore stroke
160 90 mv
111 94 lin stroke
111 94 mv
55 93 lin stroke
55 93 mv
0 93 lin stroke
0 93 mv
0 0 lin stroke
0 0 mv
141 0 lin stroke
141 0 mv
141 56 lin stroke
141 56 mv
160 90 lin stroke
638 845 mv
560 845 lin stroke
645 522 mv
700 440 lin stroke
700 440 mv
764 440 lin stroke
764 440 mv
764 594 lin stroke
84 148 mv
74 181 lin stroke
74 181 mv
45 185 lin stroke
45 185 mv
0 185 lin stroke
0 185 mv
0 93 lin stroke
55 93 mv
84 148 lin stroke
69 249 mv
49 280 lin stroke
0 280 mv
0 185 lin stroke
45 185 mv
69 249 lin stroke
42 436 mv
0 436 lin stroke
0 436 mv
0 383 lin stroke
42 383 mv
42 436 lin stroke
0 539 mv
0 436 lin stroke
42 436 mv
54 539 lin stroke
141 0 mv
214 0 lin stroke
214 0 mv
214 56 lin stroke
214 56 mv
141 56 lin stroke
214 0 mv
278 0 lin stroke
278 0 mv
278 56 lin stroke
278 56 mv
214 56 lin stroke
344 81 mv
303 88 lin stroke
303 88 mv
278 56 lin stroke
278 0 mv
385 0 lin stroke
385 0 mv
385 49 lin stroke
385 49 mv
344 81 lin stroke
385 0 mv
422 0 lin stroke
422 0 mv
422 83 lin stroke
} def
/Part_2 {
422 83 mv
385 49 lin stroke
422 0 mv
461 0 lin stroke
461 0 mv
461 182 lin stroke
461 182 mv
419 142 lin stroke
419 142 mv
422 83 lin stroke
461 0 mv
764 0 lin stroke
764 0 mv
764 281 lin stroke
764 281 mv
557 281 lin stroke
557 281 mv
486 242 lin stroke
486 242 mv
461 182 lin stroke
764 281 mv
764 355 lin stroke
764 355 mv
668 355 lin stroke
668 355 mv
596 390 lin stroke
596 390 mv
557 366 lin stroke
557 366 mv
554 327 lin stroke
554 327 mv
557 281 lin stroke
764 355 mv
764 440 lin stroke
700 440 mv
668 355 lin stroke
111 94 mv
140 149 lin stroke
140 149 mv
84 148 lin stroke
160 90 mv
212 150 lin stroke
212 150 mv
162 174 lin stroke
162 174 mv
140 149 lin stroke
303 88 mv
288 136 lin stroke
288 136 mv
243 165 lin stroke
243 165 mv
212 150 lin stroke
344 81 mv
349 129 lin stroke
349 129 mv
315 153 lin stroke
315 153 mv
288 136 lin stroke
419 142 mv
404 181 lin stroke
404 181 mv
374 170 lin stroke
374 170 mv
349 129 lin stroke
162 174 mv
126 208 lin stroke
126 208 mv
74 181 lin stroke
243 165 mv
239 196 lin stroke
239 196 mv
233 225 lin stroke
233 225 mv
223 245 lin stroke
223 245 mv
191 250 lin stroke
191 250 mv
146 235 lin stroke
146 235 mv
126 208 lin stroke
315 153 mv
293 184 lin stroke
293 184 mv
239 196 lin stroke
374 170 mv
359 226 lin stroke
359 226 mv
330 218 lin stroke
330 218 mv
301 200 lin stroke
301 200 mv
293 184 lin stroke
146 235 mv
142 273 lin stroke
142 273 mv
117 287 lin stroke
117 287 mv
69 249 lin stroke
117 287 mv
139 365 lin stroke
191 250 mv
205 302 lin stroke
205 302 mv
188 317 lin stroke
188 317 mv
142 273 lin stroke
188 317 mv
181 382 lin stroke
301 200 mv
275 229 lin stroke
275 229 mv
233 225 lin stroke
330 218 mv
305 247 lin stroke
305 247 mv
275 229 lin stroke
305 247 mv
292 276 lin stroke
292 276 mv
252 279 lin stroke
252 279 mv
223 245 lin stroke
252 279 mv
238 314 lin stroke
238 314 mv
205 302 lin stroke
359 226 mv
391 274 lin stroke
391 274 mv
371 301 lin stroke
371 301 mv
315 299 lin stroke
315 299 mv
292 276 lin stroke
404 181 mv
447 250 lin stroke
447 250 mv
449 287 lin stroke
449 287 mv
391 274 lin stroke
486 242 mv
447 250 lin stroke
315 299 mv
297 328 lin stroke
} def
/Part_3 {
297 328 mv
259 341 lin stroke
259 341 mv
238 314 lin stroke
371 301 mv
380 331 lin stroke
380 331 mv
344 365 lin stroke
344 365 mv
314 381 lin stroke
314 381 mv
299 362 lin stroke
299 362 mv
297 328 lin stroke
449 287 mv
486 325 lin stroke
486 325 mv
456 347 lin stroke
456 347 mv
410 347 lin stroke
410 347 mv
380 331 lin stroke
554 327 mv
486 325 lin stroke
557 366 mv
492 403 lin stroke
492 403 mv
460 386 lin stroke
460 386 mv
456 347 lin stroke
596 390 mv
573 472 lin stroke
519 495 mv
477 450 lin stroke
477 450 mv
492 403 lin stroke
460 386 mv
421 408 lin stroke
421 408 mv
393 385 lin stroke
393 385 mv
410 347 lin stroke
393 385 mv
362 398 lin stroke
362 398 mv
344 365 lin stroke
421 408 mv
417 443 lin stroke
417 443 mv
377 438 lin stroke
377 438 mv
362 398 lin stroke
477 450 mv
441 468 lin stroke
441 468 mv
417 443 lin stroke
482 539 mv
428 510 lin stroke
428 510 mv
441 468 lin stroke
259 341 mv
261 374 lin stroke
261 374 mv
257 411 lin stroke
257 411 mv
216 430 lin stroke
299 362 mv
261 374 lin stroke
314 381 mv
306 439 lin stroke
306 439 mv
287 456 lin stroke
287 456 mv
257 411 lin stroke
377 438 mv
385 481 lin stroke
385 481 mv
364 504 lin stroke
364 504 mv
331 485 lin stroke
331 485 mv
306 439 lin stroke
287 456 mv
290 496 lin stroke
290 496 mv
236 485 lin stroke
331 485 mv
316 522 lin stroke
316 522 mv
290 496 lin stroke
316 522 mv
258 579 lin stroke
364 504 mv
362 574 lin stroke
362 574 mv
272 611 lin stroke
428 510 mv
385 481 lin stroke
453 578 mv
370 597 lin stroke
370 597 mv
362 574 lin stroke
370 597 mv
352 634 lin stroke
352 634 mv
273 651 lin stroke
421 667 mv
352 634 lin stroke
429 739 mv
298 721 lin stroke
} def

/Centres {
606 813 NC           % Aceh (Ace)
718 517 NC           % Ayutthaya (Ayu)
97 121 HC           % Meshed (Mes)
161 126 NC           % Herat (Her)
224 94 HC           % Balkh (Bal)
321 114 HC           % Badakhshan (Bad)
385 111 NC           % Kashmir (Kas)
274 168 HC           % Kabul (Kab)
342 177 NC           % Lahore (Lah)
94 230 HC           % Shiraz (Shi)
98 310 HC           % Hormuz (Hor)
171 271 NC           % Sind (Sin)
302 223 HC           % Multan (Mul)
220 277 HC           % Ahmadabad (Abd)
61 463 NC           % Oman (Oma)
403 234 HC           % Agra (Agr)
443 199 HC           % Awadh (Awa)
274 306 HC           % Chitor (Chi)
336 332 NC           % Malwa (Mal)
505 288 HC           % Bihar (Bih)
639 439 NC           % Pegu (Peg)
376 363 HC           % Warangal (War)
392 416 HC           % Telingana (Tel)
454 425 HC           % Golconda (Gol)
474 496 NC           % Orissa (Ori)
218 371 NC           % Gujarat (Guj)
285 406 NC           % Khandesh (Kha)
342 435 NC           % Hyderabad (Hyd)
254 456 HC           % Ahmadnagar (Ahm)
308 481 HC           % Bijapur (Bij)
264 528 HC           % Goa (Goa)
415 543 HC           % Bangalore (Ban)
315 617 HC           % Calicut (Cal)
408 618 HC           % Pulicat (Pul)
362 743 NC           % Kandy (Kdy)
} def

/ACE {606 813} def
/AYU {718 517} def
/MES {97 121} def
/HER {161 126} def
/BAL {224 94} def
/BAD {321 114} def
/KAS {385 111} def
/KAB {274 168} def
/LAH {342 177} def
/SHI {94 230} def
/HOR {98 310} def
/SIN {171 271} def
/MUL {302 223} def
/ABD {220 277} def
/OMA {61 463} def
/AGR {403 234} def
/AWA {443 199} def
/CHI {274 306} def
/MAL {336 332} def
/BIH {505 288} def
/PEG {639 439} def
/WAR {376 363} def
/TEL {392 416} def
/GOL {454 425} def
/ORI {474 496} def
/GUJ {218 371} def
/KHA {285 406} def
/HYD {342 435} def
/AHM {254 456} def
/BIJ {308 481} def
/GOA {264 528} def
/BAN {415 543} def
/CAL {315 617} def
/PUL {408 618} def
/KDY {362 743} def

/DrawMap {
mapdict begin
premap
Part_1
Part_2
Part_3
Centres
postmap
end
} def
